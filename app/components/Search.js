import React from 'react';
import $ from 'jquery';
import {connect} from 'react-redux';
import rootReducer from "../reducers/Spotify";
import generalActions from "../actions";
import ArtistList from "./ArtistList";
import NextPrevButton from "./NextPrevButton";
import Error from "./Error";
import marked from "marked";
import AlbumList from "./AlbumList";
import {sendAjaxRequest} from "../modules/sendAjaxRequest";

class Search extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			search:true,
			errorText:null
		}
		this.startSearch = this.startSearch.bind(this);
		this.ajaxError = this.ajaxError.bind(this);
		this.setListingData = this.setListingData.bind(this)
		this.showSearch = this.showSearch.bind(this)
		this.showNewRelease = this.showNewRelease.bind(this)
		this.setNewReleasesData = this.setNewReleasesData.bind(this)
		this.getAlbumsDetails = this.getAlbumsDetails.bind(this)
		this.addAlbumDetailsToResults = this.addAlbumDetailsToResults.bind(this)
	}
	componentDidMount() {
		this.showNewRelease()
	}
	componentDidCatch(error, info) {
	}
	setListingData(output){
		this.props.setAjaxError(null);
		this.props.setResults(output);
	}
	setNewReleasesData(output){
		this.props.setAjaxError(null);
		this.props.setResults(output);
		this.getAlbumsDetails();
	}
	addAlbumDetailsToResults(output){
		this.props.setAjaxError(null);
		this.props.addAlbumDetails(output);
	}
	searchIcon(){
		//<!-- Icon Generated by IcoMoon.io -->
		let icon = marked('<svg class="icon" version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path d="M31.008 27.231l-7.58-6.447c-0.784-0.705-1.622-1.029-2.299-0.998 1.789-2.096 2.87-4.815 2.87-7.787 0-6.627-5.373-12-12-12s-12 5.373-12 12 5.373 12 12 12c2.972 0 5.691-1.081 7.787-2.87-0.031 0.677 0.293 1.515 0.998 2.299l6.447 7.58c1.104 1.226 2.907 1.33 4.007 0.23s0.997-2.903-0.23-4.007zM12 20c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8-3.582 8-8 8z"></path></svg>', {sanitize: false});
    	return { __html: icon };
	}
	getAlbumsDetails(){
		var album_ids = "";
		this.props.info.results.items.map((album,index)=>{
			album_ids += album.id + ((index<(this.props.info.results.items.length-1))?",":"");
		});
		let url =  `${this.props.info.spotify_base}/albums?ids=${album_ids}`;
		sendAjaxRequest(url,this.props.info.token,this.addAlbumDetailsToResults,this.ajaxError);
	}
	ajaxError(jqXHR, textStatus){
		console.log(jqXHR)
		console.log(textStatus)
		this.props.setAjaxError(jqXHR.responseJSON);
	}
	startSearch(e){
		e.preventDefault();
		var search_string = String($("input[name=query]").val()).replace(/\s/g,"%20");

		if(search_string.match(/\D/)){
			this.props.setCategory("artists");
			this.props.setArtist(null);
			this.setState({errorText:null});
			var search_url = this.props.info.search.url + search_string + this.props.info.search.param + this.props.info.search.subject;
			sendAjaxRequest(search_url,this.props.info.token,this.setListingData,this.ajaxError);	
		}
		else{
			this.setState({errorText:"Please Enter a Search String"});
		}
		
	}
	showNewRelease(){
		var new_releases_url = this.props.info.spotify_base + this.props.info.new_releases_path;
		sendAjaxRequest(new_releases_url,this.props.info.token,this.setNewReleasesData,this.ajaxError);
	}
	showSearch(){
		this.props.setArtist(null);
	}
	showArtistName(){
		return (
			<div>
			<button onClick={this.showSearch}>Search</button>
	    	Artist {this.props.info.selected_artist.name}
	    	</div>
		)
	}
	searchArea(){		
		return (
			<div className="search-input-area">
	    	<h1>Search Artists</h1>
	    	<form className="search_form">
	    		{ this.state.errorText &&
	    			(<Error errorText={this.state.errorText}/>)
	    		}
	    		<input type="text" name="query" placeholder="Enter Your Query" />
	    		<button type="submit" onClick={this.startSearch}><span dangerouslySetInnerHTML={this.searchIcon()}></span></button>
	    	</form>
	    	</div>
		)
	}
	render() {
		var listing = null;
		switch(this.props.info.category){
			case 'artists':
				listing = <ArtistList/>
				break;
			case 'albums':
				listing = <AlbumList/>
				break;
			case 'newreleases':
				listing = <AlbumList/>
				break;
		}
		
	    return (
	    	<div>
	    	{ this.props.info.selected_artist == null && this.searchArea() }
	    	{ this.props.info.selected_artist != null && this.showArtistName() }
	    	{ this.props.info.results != null && 
				listing
	    	}
	    	{this.props.info.prev_url != null &&
	    		<NextPrevButton url={this.props.info.prev_url} text="Previous" />
	    	}
	    	{this.props.info.next_url != null &&
	    		<NextPrevButton url={this.props.info.next_url} text="Next" />
	    	}
	    	
	    	</div>

	    )
  }
}
const mapStateToProps = function(state){
	return {"info":state};		
}

 const mapDispatchToProps = function(dispatch) {
    return({
        setResults: (results) => {
        	dispatch({type:"SET_RESULTS","results":results})
        },
        setArtist: (artist_obj) => {
        	dispatch({type:"SET_ARTIST","artist":artist_obj})
        },
        addAlbumDetails: (results) => {
        	dispatch({type:"ADD_ALBUM_DETAILS","results":results})
        },
        setCategory: (category) => {
        	dispatch({type:"SET_SEARCH_CATEGORY","category":category})
        },
        setAjaxError: (error) => {
        	dispatch({type:"SET_AJAX_ERROR","error":error})
        }
    })
}

export default connect(mapStateToProps,mapDispatchToProps)(Search)

